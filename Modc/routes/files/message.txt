```python
import argparse
import json
import sys
import os
import signal
import socket
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.hmac import HMAC
from cryptography.hazmat.primitives.hashes import SHA256
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import rsa

def generate_auth_file(auth_filename):
    # AQUI PODE FICAR A generateserverkeys()
    with open(auth_filename, "wb") as f:
        f.write(private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        ))
    print("The Auth File has been created")


def handle_client(client_socket):
    pass


def run_bank_server(port):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(('0.0.0.0', port))
    server_socket.listen(5)

    while True:
        client_socket, client_address = server_socket.accept()
        handle_client(client_socket)


def parse_args():
    parser = argparse.ArgumentParser(description='Bank')
    parser.add_argument('-p', metavar='bk-port', type=int, default=3000, help='The port that bank will listen on. Defaults to 3000.')
    parser.add_argument('-s', metavar='auth-file', type=str, default='bank.auth', help='Name of the auth file. Defaults to bank.auth')
    return parser.parse_args()

def signal_handler(sig, frame):
    print("SIGTERM received. Exiting cleanly...")
    sys.exit(0)

if __name__ == "__main__":
    args = parse_args()
    if os.path.exists(args.s):
        print("Error: Auth file already exists.")
        sys.exit(125)

    generate_auth_file(args.s)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        run_bank_server(args.p)
    except KeyboardInterrupt:
        print("SIGTERM received. Exiting...")
        sys.exit(0)
```